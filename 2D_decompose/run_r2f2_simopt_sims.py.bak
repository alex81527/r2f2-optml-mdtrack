import os, sys
sys.path.append("../")

if not os.environ.has_key('DISPLAY'):
    import matplotlib
    matplotlib.use('Agg')

from common_modules import rf_common
import numpy as np
import time, keras, sys
from common_modules import r2f2_helper, r2f2
import operator

import pylab as pl

def get_ml_guesses(model, channel):
    psis = list(np.arange(-1, 1, 0.1))
    distances = list(np.arange(0, 210, 7))
    distances.append(distances[-1])
    psis.append(psis[-1])
    nrows = len(psis)
    ncols = len(distances)
    ch = channel.transpose().ravel()
    ch = np.concatenate([np.real(ch), np.imag(ch)])
    pred = model.predict(ch.reshape(1,-1))
    pred = pred.reshape(nrows, ncols)
    
    p_d_psi = r2f2_helper.get_peaks(pred, distances, psis, show_plots=False)
    
    ####sort guesses by "probability"
    p_d_psi = sorted(p_d_psi.items(), key=operator.itemgetter(1), reverse=True)
    p_d_psi = [k for k,v in p_d_psi]
    temp = []
    map(temp.extend, p_d_psi)
    p_d_psi = temp
    
    return p_d_psi

if __name__ == '__main__':
    cf1 = 2.4e9
    cf2 = cf1+30e6
    c = 3e8
    min_d, max_d = 0, 210.0

    K = 4
    K2 = 3
    bw = 10e6
    nfft = 64
    l1 = rf_common.get_lambs(cf1, bw, nfft)
    l2 = rf_common.get_lambs(cf2, bw, nfft)
    sep = l1[0]/2

    distances = np.arange(min_d, max_d, 7)

    model_src = "new_nl5_hu400_K4_2400_sigma_1.0_210m_step7.hdf5"
    #model_src = "nl5_hu250_K4_2400_sigma_1.2.hdf5"
    model = keras.models.load_model(model_src)
    
    window = 10
    dist_step = 1
    psi_step = 1
    min_sep = 1
    for num_paths in [6, 5, 4, 2]:
        max_num_paths = num_paths+2
        full_exp_dict = r2f2_helper.precomputer(l1, K, sep, max_d, dist_step, psi_step)
        for i in range(50):
            params = rf_common.get_synth_params_sep(num_paths, min_d, max_d-1, 15)
            #print params[-1]
            data_snr = np.random.randint(100,150)/10.0
            ch_snr = np.random.randint(150,200)/10.0

            ch_l1 = rf_common.get_chans_from_params(params, K, sep, l1)
            ch_l1 = rf_common.add_noise_array(ch_l1, ch_snr)

            ch_l2 = rf_common.get_chans_from_params(params, K2, sep, l2)

            for meth in ["nnde", "r2f2"]:
                t = time.time()
                if meth == "nnde":
                    initial_guesses = get_ml_guesses(model, ch_l1)
                    best_sol, reason = r2f2.r2f2_solver_fixed_init(ch_l1, l1, sep, max_d, initial_guesses, max_num_paths)
                else:
                    initial_guesses = r2f2_helper.get_initial_guesses(l1, K, sep, ch_l1, full_exp_dict, max_d, psi_step=1, dist_step=1, show_plots=False)
                    best_sol, reason = r2f2.r2f2_solver(ch_l1, l1, sep, max_d, initial_guesses, max_num_paths)

                d_ns = best_sol[0::2]
                psi_ns = best_sol[1::2]

                param_guesses = r2f2.get_full_params_method3(d_ns, psi_ns, K, sep, l1, ch_l1)

                ch_l2_guess = rf_common.get_chans_from_params(param_guesses, K2, sep, l2)

                t = round(time.time()-t,2)
                print meth+"-beam1:", t, K2, num_paths, len(d_ns), ch_snr, rf_common.beam_eval(ch_l2, ch_l2_guess, 0.001, data_snr)
                sys.stdout.flush()
